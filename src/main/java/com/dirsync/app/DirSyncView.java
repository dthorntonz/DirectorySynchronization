/*
 * DirSyncView.java
 */
package com.dirsync.app;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;

import com.dirsync.util.FileManager;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;

import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;

/**
 * The application's main frame.
 */
public class DirSyncView extends FrameView {

    private String[] functions = new String[]{"Cataloging directories", "Deleting files", "Copying files", "Finding duplicates", "Remove empty directories", "Remove from lists"};
    private HashSet<String> functionsSet = new HashSet<String>(Arrays.asList(functions));

    public enum SyncMode {

        SYNCHRONIZATION, DUPLICATES
    };

    public DirSyncView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        jLabel3.setText("");
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = DirSyncApp.getApplication().getMainFrame();
            aboutBox = new DirSyncAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        DirSyncApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jLabel1.setName("jLabel1Test"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(DirSyncView.class);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jTextField1.setText(resourceMap.getString("Dir1.text")); // NOI18N
        jTextField1.setName("Dir1"); // NOI18N

        jTextField2.setText(resourceMap.getString("Dir2.text")); // NOI18N
        jTextField2.setName("Dir2"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(DirSyncView.class, this);
        jButton1.setAction(actionMap.get("synchronize")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("duplicates")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jList1.setName("jList1"); // NOI18N
        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jList2.setName("jList2"); // NOI18N
        jScrollPane2.setViewportView(jList2);

        jButton3.setAction(actionMap.get("copyToDir2")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        jButton4.setAction(actionMap.get("copyToDir1")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N

        jButton5.setAction(actionMap.get("deleteFiles")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("FileSelectorHeading.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("FileSelectorHeading.text")); // NOI18N
        jLabel3.setName("FileSelectorHeading"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jButton6.setAction(actionMap.get("removeEmptyDirectories")); // NOI18N
        jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
        jButton6.setName("jButton6"); // NOI18N

        jButton7.setAction(actionMap.get("removeFromList")); // NOI18N
        jButton7.setText(resourceMap.getString("jButton7.text")); // NOI18N
        jButton7.setActionCommand(resourceMap.getString("jButton7.actionCommand")); // NOI18N
        jButton7.setName("jButton7"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButton6))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE))))
                .addGap(16, 16, 16))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton6))
                .addGap(30, 30, 30)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)))
                .addGap(27, 27, 27))
        );

        jLabel1.getAccessibleContext().setAccessibleName(resourceMap.getString("jLabel1.AccessibleContext.accessibleName")); // NOI18N
        jLabel2.getAccessibleContext().setAccessibleName(resourceMap.getString("jLabel2.AccessibleContext.accessibleName")); // NOI18N

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1096, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1076, Short.MAX_VALUE)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap(808, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel))
                .addGap(11, 11, 11)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void synchronize() {
        final DirSyncView dirSyncView = this;
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            public Void doInBackground() {
                dirSyncView.jButton3.setEnabled(true);
                dirSyncView.jButton4.setEnabled(true);
                dirSyncView.statusMessageLabel.setText(functions[0]);
                dirSyncView.progressBar.setStringPainted(true);
                dirSyncView.progressBar.setIndeterminate(true);
                dirSyncView.progressBar.setVisible(true);
                jLabel3.setText(SyncMode.SYNCHRONIZATION.name());
                jLabel5.setText("Files in Directory 1 not in Directory 2");
                jLabel6.setText("Files in Directory 2 not in Directory 1");
                ArrayList<String> emptyList = new ArrayList<String>();
                emptyList.add("");
                jList1.setListData(emptyList.toArray());
                jList2.setListData(emptyList.toArray());

                String dir1 = "C:\\Temp\\Test\\dir1";
                String dir2 = "C:\\Temp\\Test\\dir2";

                if ((jTextField1.getText().length() > 0)) {
                    dir1 = jTextField1.getText();
                }

                if ((jTextField2.getText().length() > 0)) {
                    dir2 = jTextField2.getText();
                }

                FileManager fileManager = new FileManager();
                // Get List of files from the directories.
                dirSyncView.progressBar.setString("Cataloging " + dir1);
                Collection<String> dir1Files = fileManager.catalogDirectory(dir1, true, null);
                dirSyncView.progressBar.setString("Cataloging " + dir2);
                Collection<String> dir2Files = fileManager.catalogDirectory(dir2, true, null);

                // Get items from hashmap 1 that are not in hashmap 2.
                HashSet<String> dir1Diff = new HashSet<String>();
                dir1Diff.addAll(dir1Files);
                dir1Diff.removeAll(dir2Files);

                // Get items from hashmap 2 that are not in hashmp 1.
                HashSet<String> dir2Diff = new HashSet<String>();
                dir2Diff.addAll(dir2Files);
                dir2Diff.removeAll(dir1Files);

                // Add items to list box 1.
                dirSyncView.jList1.setListData(dir1Diff.toArray());

                // Add items to list box 2.
                dirSyncView.jList2.setListData(dir2Diff.toArray());
                dirSyncView.statusMessageLabel.setText("Finished cataloging");
                dirSyncView.progressBar.setVisible(false);
                return null;
            }
        };

        if (functionsSet.contains(this.statusMessageLabel.getText())) {
            JOptionPane.showMessageDialog(this.getFrame(), this.statusMessageLabel.getText() + " in progress.");
        } else {
            worker.execute();
        }
    }

    @Action
    public void duplicates() {
        final DirSyncView dirSyncView = this;
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            public Void doInBackground() {
                try {
                    dirSyncView.jButton3.setEnabled(false);
                    dirSyncView.jButton4.setEnabled(false);
                    dirSyncView.statusMessageLabel.setText(functions[3]);
                    dirSyncView.progressBar.setStringPainted(true);
                    dirSyncView.progressBar.setIndeterminate(true);
                    dirSyncView.progressBar.setVisible(true);
                    jLabel3.setText(SyncMode.DUPLICATES.name());
                    jLabel5.setText("Duplicate files in Directory 1");
                    jLabel6.setText("Duplicate to files in Directory 1");
                    ArrayList<String> emptyList = new ArrayList<String>();
                    emptyList.add("");
                    jList1.setListData(emptyList.toArray());
                    jList2.setListData(emptyList.toArray());
                    String dir1 = "C:\\Temp\\Test\\dir1";
                    String dir2 = "C:\\Temp\\Test\\dir1";
                    if (jTextField1.getText().length() > 0) {
                        dir1 = jTextField1.getText();
                    }
                    jTextField2.setText("");
                    FileManager fileManager = new FileManager();
                    // Get duplicate files.
                    dirSyncView.progressBar.setString("Finding duplicates in " + dir1);
                    ArrayList<ArrayList<String>> duplicateFiles = fileManager.findDuplicates(dir1, true);

                    ArrayList<String> list1 = new ArrayList<String>();
                    ArrayList<String> list2 = new ArrayList<String>();
                    for (int i = 0; i < duplicateFiles.size(); i++) {
                        for (int j = 0; j < duplicateFiles.get(i).size(); j++) {
                            if (j == 0) {
                                list1.add(duplicateFiles.get(i).get(j));
                            } else if (j == 1) {
                                list2.add(duplicateFiles.get(i).get(j));
                            } else {
                                list1.add(duplicateFiles.get(i).get(0));
                                list2.add(duplicateFiles.get(i).get(j));
                            }
                        }
                    }
                    // Add items to list box 1.
                    dirSyncView.jList1.setListData(list1.toArray());
                    // Add items to list box 2.
                    dirSyncView.jList2.setListData(list2.toArray());
                    dirSyncView.statusMessageLabel.setText("Finished finding duplicates");
                    dirSyncView.progressBar.setVisible(false);
                } catch (IOException ex) {
                    Logger.getLogger(DirSyncView.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }
        };

        if (functionsSet.contains(this.statusMessageLabel.getText())) {
            JOptionPane.showMessageDialog(this.getFrame(), this.statusMessageLabel.getText() + " in progress.");
        } else {
            worker.execute();
        }
    }

    public ArrayList<String> getJListElements(JList jlist) {
        ArrayList<String> elements = new ArrayList<String>();
        ListModel listModel = jlist.getModel();
        for (int i = 0; i < listModel.getSize(); i++) {
            elements.add((String) listModel.getElementAt(i));
        }
        return elements;
    }

    @Action
    public void deleteFiles() {
        if (functionsSet.contains(this.statusMessageLabel.getText())) {
            JOptionPane.showMessageDialog(this.getFrame(), this.statusMessageLabel.getText() + " in progress.");
        } else {
            final DirSyncView dirSyncView = this;
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete all selected files?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {

                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                    @Override
                    public Void doInBackground() {
                        dirSyncView.statusMessageLabel.setText(functions[1]);
                        dirSyncView.progressBar.setStringPainted(true);
                        dirSyncView.progressBar.setIndeterminate(true);
                        dirSyncView.progressBar.setVisible(true);

                        String dir1 = "C:\\Temp\\Test\\dir1";
                        String dir2 = "C:\\Temp\\Test\\dir2";

                        if ((jTextField1.getText().length() > 0)) {
                            dir1 = jTextField1.getText();
                        }

                        if ((jTextField2.getText().length() > 0)) {
                            dir2 = jTextField2.getText();
                        }
                        if (dirSyncView.jLabel3.getText().equals(SyncMode.DUPLICATES.name())) {
                            dir2 = dir1;
                        }

                        FileManager fileManager = new FileManager();

                        ArrayList<String> dir1Elements = getJListElements(dirSyncView.jList1);
                        ArrayList<String> dir2Elements = getJListElements(dirSyncView.jList2);

                        // Get the selected files from the dir1 list box.
                        String[] dir1Selections = Arrays.asList(jList1.getSelectedValues()).toArray(new String[jList1.getSelectedValues().length]);
                        String[] dir2Selections = Arrays.asList(jList2.getSelectedValues()).toArray(new String[jList2.getSelectedValues().length]);

                        if (dir1Selections.length > 0) {
                            dirSyncView.progressBar.setString("Deleting from dir 1");
                            for (int i = 0; i < dir1Selections.length; i++) {
                                try {
                                    fileManager.deleteFile(dir1 + fileManager.getSeparator() + dir1Selections[i]);
                                    // Remove the file from the list.
                                    if (dirSyncView.jLabel3.getText().equals(SyncMode.DUPLICATES.name())) {
                                        // delete the same number element from list 2 that was deleted from list 1.
                                        int listIndex = dir1Elements.indexOf(dir1Selections[i]);
                                        if (listIndex > -1) {
                                            dir2Elements.remove(listIndex);
                                            dir1Elements.remove(dir1Selections[i]);
                                        }
                                    } else {
                                        dir1Elements.remove(dir1Selections[i]);
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(DirSyncView.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }

                        // Get the selected files from the dir2 list box.
                        if (dir2Selections.length > 0) {
                            dirSyncView.progressBar.setString("Deleting from dir 2");
                            for (int i = 0; i < dir2Selections.length; i++) {
                                try {
                                    fileManager.deleteFile(dir2 + fileManager.getSeparator() + dir2Selections[i]);
                                    if (dirSyncView.jLabel3.getText().equals(SyncMode.DUPLICATES.name())) {
                                        // delete the same number element from list 2 that was deleted from list 1.
                                        int listIndex = dir2Elements.indexOf(dir2Selections[i]);
                                        if (listIndex > -1) {
                                            dir1Elements.remove(listIndex);
                                            dir2Elements.remove(dir2Selections[i]);
                                        }
                                    } else {
                                        // Remove the file from the list.
                                        dir2Elements.remove(dir2Selections[i]);
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(DirSyncView.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }

                        jList1.setListData(dir1Elements.toArray());
                        jList2.setListData(dir2Elements.toArray());

                        dirSyncView.statusMessageLabel.setText("Finished deleting");
                        dirSyncView.progressBar.setVisible(false);
                        return null;
                    }
                };
                worker.execute();
            }
        }
    }

    @Action
    public void copyToDir2() {
        if (functionsSet.contains(this.statusMessageLabel.getText())) {
            JOptionPane.showMessageDialog(this.getFrame(), this.statusMessageLabel.getText() + " in progress.");
        } else {
            final DirSyncView dirSyncView = this;
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to copy all selected files from directory 1 to directory 2?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {

                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                    @Override
                    public Void doInBackground() {
                        dirSyncView.statusMessageLabel.setText(functions[2]);
                        dirSyncView.progressBar.setStringPainted(true);
                        dirSyncView.progressBar.setIndeterminate(true);
                        dirSyncView.progressBar.setVisible(true);

                        String dir1 = "C:\\Temp\\Test\\dir1";
                        String dir2 = "C:\\Temp\\Test\\dir2";

                        if ((jTextField1.getText().length() > 0)) {
                            dir1 = jTextField1.getText();
                        }

                        if ((jTextField2.getText().length() > 0)) {
                            dir2 = jTextField2.getText();
                        }

                        FileManager fileManager = new FileManager();

                        // Get the selected files from the dir1 list box.
                        String[] dir1Selections = Arrays.asList(jList1.getSelectedValues()).toArray(new String[jList1.getSelectedValues().length]);
                        if (dir1Selections.length > 0) {
                            dirSyncView.progressBar.setString("Copying to dir 2");
                            ArrayList<String> dir1Elements = getJListElements(dirSyncView.jList1);
                            for (int i = 0; i < dir1Selections.length; i++) {
                                try {
                                    String from = dir1 + fileManager.getSeparator() + dir1Selections[i];
                                    String to = dir2 + fileManager.getSeparator() + dir1Selections[i];
                                    fileManager.copyFile(from, to);
                                    // Remove the file from the list.
                                    dir1Elements.remove(dir1Selections[i]);
                                } catch (IOException ex) {
                                    Logger.getLogger(DirSyncView.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            jList1.setListData(dir1Elements.toArray());
                        }

                        dirSyncView.statusMessageLabel.setText("Finished copy");
                        dirSyncView.progressBar.setVisible(false);
                        return null;
                    }
                };
                worker.execute();
            }
        }
    }

    @Action
    public void copyToDir1() {
        if (functionsSet.contains(this.statusMessageLabel.getText())) {
            JOptionPane.showMessageDialog(this.getFrame(), this.statusMessageLabel.getText() + " in progress.");
        } else {
            final DirSyncView dirSyncView = this;
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to copy all selected files from directory 2 to directory 1?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {

                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                    @Override
                    public Void doInBackground() {
                        dirSyncView.statusMessageLabel.setText(functions[2]);
                        dirSyncView.progressBar.setStringPainted(true);
                        dirSyncView.progressBar.setIndeterminate(true);
                        dirSyncView.progressBar.setVisible(true);

                        String dir1 = "C:\\Temp\\Test\\dir1";
                        String dir2 = "C:\\Temp\\Test\\dir2";

                        if ((jTextField1.getText().length() > 0)) {
                            dir1 = jTextField1.getText();
                        }

                        if ((jTextField2.getText().length() > 0)) {
                            dir2 = jTextField2.getText();
                        }

                        FileManager fileManager = new FileManager();

                        // Get the selected files from the dir1 list box.
                        String[] dir2Selections = Arrays.asList(jList2.getSelectedValues()).toArray(new String[jList2.getSelectedValues().length]);
                        if (dir2Selections.length > 0) {
                            dirSyncView.progressBar.setString("Copying to dir 1");
                            ArrayList<String> dir2Elements = getJListElements(dirSyncView.jList2);
                            for (int i = 0; i < dir2Selections.length; i++) {
                                try {
                                    String from = dir2 + fileManager.getSeparator() + dir2Selections[i];
                                    String to = dir1 + fileManager.getSeparator() + dir2Selections[i];
                                    fileManager.copyFile(from, to);
                                    // Remove the file from the list.
                                    dir2Elements.remove(dir2Selections[i]);
                                } catch (IOException ex) {
                                    Logger.getLogger(DirSyncView.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            jList2.setListData(dir2Elements.toArray());
                        }

                        dirSyncView.statusMessageLabel.setText("Finished copy");
                        dirSyncView.progressBar.setVisible(false);
                        return null;
                    }
                };
                worker.execute();
            }
        }
    }

    @Action
    public void removeEmptyDirectories() {
        if (functionsSet.contains(this.statusMessageLabel.getText())) {
            JOptionPane.showMessageDialog(this.getFrame(), this.statusMessageLabel.getText() + " in progress.");
        } else {
            final DirSyncView dirSyncView = this;
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove empty directories?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {

                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                    @Override
                    public Void doInBackground() {
                        dirSyncView.statusMessageLabel.setText(functions[4]);
                        dirSyncView.progressBar.setStringPainted(true);
                        dirSyncView.progressBar.setIndeterminate(true);
                        dirSyncView.progressBar.setVisible(true);

                        String dir1 = "C:\\Temp\\Test\\dir1";
                        String dir2 = "C:\\Temp\\Test\\dir2";

                        if ((jTextField1.getText().length() > 0)) {
                            dir1 = jTextField1.getText();
                        }

                        if ((jTextField2.getText().length() > 0)) {
                            dir2 = jTextField2.getText();
                        }
                        if (dirSyncView.jLabel3.getText().equals(SyncMode.DUPLICATES.name())) {
                            dir2 = "";
                        }

                        FileManager fileManager = new FileManager();

                        dirSyncView.progressBar.setString("Removing dir1 empty directories");
                        fileManager.removeEmptyDirectories(dir1);
                        if (dir2.length() > 0) {
                            dirSyncView.progressBar.setString("Remove dir2 empty directories");
                            fileManager.removeEmptyDirectories(dir2);
                        }

                        dirSyncView.statusMessageLabel.setText("Finished removing empty directories");
                        dirSyncView.progressBar.setVisible(false);
                        return null;
                    }
                };
                worker.execute();
            }
        }
    }

    @Action
    public void removeFromList() {
        if (functionsSet.contains(this.statusMessageLabel.getText())) {
            JOptionPane.showMessageDialog(this.getFrame(), this.statusMessageLabel.getText() + " in progress.");
        } else {
            final DirSyncView dirSyncView = this;
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove selected files from the lists?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {

                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                    @Override
                    public Void doInBackground() {
                        dirSyncView.statusMessageLabel.setText(functions[5]);
                        dirSyncView.progressBar.setStringPainted(true);
                        dirSyncView.progressBar.setIndeterminate(true);
                        dirSyncView.progressBar.setVisible(true);

                        String dir1 = "C:\\Temp\\Test\\dir1";
                        String dir2 = "C:\\Temp\\Test\\dir2";

                        if ((jTextField1.getText().length() > 0)) {
                            dir1 = jTextField1.getText();
                        }

                        if ((jTextField2.getText().length() > 0)) {
                            dir2 = jTextField2.getText();
                        }
                        if (dirSyncView.jLabel3.getText().equals(SyncMode.DUPLICATES.name())) {
                            dir2 = dir1;
                        }

                        ArrayList<String> dir1Elements = getJListElements(dirSyncView.jList1);
                        ArrayList<String> dir2Elements = getJListElements(dirSyncView.jList2);

                        // Get the selected files from the dir1 list box.
                        String[] dir1Selections = Arrays.asList(jList1.getSelectedValues()).toArray(new String[jList1.getSelectedValues().length]);
                        String[] dir2Selections = Arrays.asList(jList2.getSelectedValues()).toArray(new String[jList2.getSelectedValues().length]);

                        if (dir1Selections.length > 0) {
                            dirSyncView.progressBar.setString("Deleting from dir 1");
                            for (int i = 0; i < dir1Selections.length; i++) {
                                // Remove the file from the list.
                                if (dirSyncView.jLabel3.getText().equals(SyncMode.DUPLICATES.name())) {
                                    // delete the same number element from list 2 that was deleted from list 1.
                                    int listIndex = dir1Elements.indexOf(dir1Selections[i]);
                                    if (listIndex > -1) {
                                        dir2Elements.remove(listIndex);
                                        dir1Elements.remove(dir1Selections[i]);
                                    }
                                } else {
                                    dir1Elements.remove(dir1Selections[i]);
                                }
                            }
                        }

                        // Get the selected files from the dir2 list box.
                        if (dir2Selections.length > 0) {
                            dirSyncView.progressBar.setString("Deleting from dir 2");
                            for (int i = 0; i < dir2Selections.length; i++) {
                                if (dirSyncView.jLabel3.getText().equals(SyncMode.DUPLICATES.name())) {
                                    // delete the same number element from list 2 that was deleted from list 1.
                                    int listIndex = dir2Elements.indexOf(dir2Selections[i]);
                                    if (listIndex > -1) {
                                        dir1Elements.remove(listIndex);
                                        dir2Elements.remove(dir2Selections[i]);
                                    }
                                } else {
                                    // Remove the file from the list.
                                    dir2Elements.remove(dir2Selections[i]);
                                }
                            }
                        }

                        jList1.setListData(dir1Elements.toArray());
                        jList2.setListData(dir2Elements.toArray());

                        dirSyncView.statusMessageLabel.setText("Finished removing");
                        dirSyncView.progressBar.setVisible(false);
                        return null;
                    }
                };
                worker.execute();
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
}
